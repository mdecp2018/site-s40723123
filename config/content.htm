<h1>簡介</h1>
<p>我是徐焌凱學號40723123~!!</p>
<p><img alt="" height="236" src="/images/clock-clipart-gear-894638-7618576.jpg" width="465"/></p>
<p></p>
<p></p>
<h2>CMSimfly 網站</h2>
<p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p>
<h2>reveal 投影片</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/reveal.leo</p>
<h2>pelican 網誌</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/pelican.leo </p>
<p>各分組必須自行更改 @edit pelicanconf.py 中的 AUTHOR 與 SITENAME</p>
<p>更改 @edit publishconf.py 中的 SITEURL</p>
<h2>Python 簡介</h2>
<p>計算機程式教材:  <a href="http://mde.tw/cp2018/content/">http://mde.tw/cp2018/content/</a> </p>
<p>可攜程式下載: <a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing">p37.7z</a></p>
<h2>OnShape 簡介</h2>
<p><a href="https://www.onshape.com/">https://www.onshape.com/</a> </p>
<p>電腦輔助設計實習課程教材: <a href="http://mde.tw/cadp2018/content/">http://mde.tw/cadp2018/content/</a> </p>
<h2>Fusion 360 簡介</h2>
<p><a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">https://www.autodesk.com/products/fusion-360/students-teachers-educators</a> </p>
<p><img alt="" height="245" src="/images/maxresdefault.jpg" width="437"/></p>
<h1>教學影片</h1>
<p><img alt="" height="168" src="/images/下載.jpg" width="300"/></p>
<h2>Week 1</h2>
<p><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ax2ZuPm3YXc" width="560"></iframe></p>
<p></p>
<h2>Week 2</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/q_1Ht6CLPWA" width="560"></iframe><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PNfuu95a3ns" width="560"></iframe></p>
<h2>Week 3</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/158Ir6Mni60" width="560"></iframe></p>
<h2>Week 4</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nMU9bYx0vPc" width="560"></iframe></p>
<h2>Week 5</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XZZXFytiRtM" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0SKgCf2zJV8" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Y0WPeopmxHg" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/n0EPI1J_0mk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GE48pZWK8vI" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5_Y1SUTpaVI" width="560"></iframe></p>
<h2>Week 6</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6ULAecjorvU" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mH_tW3erBqs" width="560"></iframe></p>
<h2>Week 7</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KiXEszwLXO0" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WEsFrcuffOA" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JA75HIMhIgk" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nju615KXghM" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hCyeqgfh02w" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Z-l3vZXzrZs" width="560"></iframe></p>
<h2>Week 8</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yAzfQm2gBEQ" width="560"></iframe></p>
<h1>教學內容</h1>
<h2>git 基本練習</h2>
<p>Git基本練習</p>
<p><span>啟動 p37 可攜系統</span></p>
<p><span>在其中一個 Dos 命令列中, 輸入:</span></p>
<p><span>    c:</span></p>
<p><span>表示要從 y: 槽切換到 c: 槽, 然後再下:</span></p>
<p><span>    cd \</span></p>
<p><span>表示要更換目錄到 c: 槽的根目錄. 接下來建立一個 test 目錄:</span><span></span></p>
<p><span>    mkdir test</span></p>
<p><span>然後更換目錄到此 test 目錄中.</span></p>
<p><span>    cd test</span></p>
<p><span>接下來要執行 git 指令, 表示要將 test 起始為 Git 的倉儲:</span></p>
<p><span>    git init</span></p>
<p><span>這時, c:\test 目錄中會新增一個 .git 目錄, 表示現在這個 c:\test 已經是 Git 倉儲.</span></p>
<p><span>接下來要利用 SciTE 編輯器, 在 test 目錄中建立一個 myprogram.txt 文字檔案, 在此之前, 請利用 SciTE 的下拉式功能表 Options 中的 Open Global Options File 開啟 SciTEGlobal.properties 設定檔案, 找到第 137 行的</span></p>
<p><span>    load.on.activate=1</span></p>
<p><span>去掉原先最前頭的 "#" 符號, 然後存檔, 之後關閉所有開啟的 SciTE 編輯器, 如此, 可以讓 SciTE 所開啟的檔案, 內容有修改時, 可以即時呈現在編輯區中.</span></p>
<p><span>接著, 重新在 Dos 命令列中輸入:</span></p>
<p><span>    y:\SciTE\bin\Sc1.exe </span></p>
<p><span>開啟已經修改 SciTEGlobal.properties 設定檔案之後的 SciTE 編輯區, </span><span>並且在  myprogram.txt 檔案中, 只加入一行:</span><span></span></p>
<p><span>    my program</span></p>
<p><span>接著存檔, 這時 c:\test 目錄中除了有 .git 目錄, 又多了一個 myprogram.txt 檔案.</span></p>
<p>接下來要對 c:\test 倉儲進行新增與提交流程, 將 myprogram.txt 納入 .git 的版次管理.</p>
<p>    git add myprogram.txt</p>
<p>    git commit -m "initial add"</p>
<p>這時, c:\test 倉儲中已經有一個改版的記錄, 接下來再編輯 myprogram.txt  檔案. 在其中的 "my program" 字串後, 連按兩個 Enter 後, 加入:</p>
<p>    first function</p>
<p>然後存檔, 接著再執行 git add 與 git commit:</p>
<p>    git add .</p>
<p>    git commit -m "add first function"</p>
<p>接著重覆上述編輯動作, 新增 "second function"</p>
<p>然後, 再執行 git add 與 git commit :</p>
<p>    git add .</p>
<p>    git commit -m "add second function"</p>
<p>這時, 使用者已經可以利用:</p>
<p>    git log</p>
<p>看到倉儲中已經有三個提交. 分別為:</p>
<p>    a3a2eb3 add second function<br/>    9295dfd add first function<br/>    3019d3f initial add</p>
<p>這時若希望在加入 first function 版本狀態時, 新增一個測試功能, 若通過測試符合需求, 則併入已經納入 second function 的版本中, 若不符合需求, 則可將該測試分支刪除.</p>
<p>先準備將工作目錄, 導回 "add first function" 的提交版本.</p>
<p>    git checkout 9295dfd</p>
<p>然後以此提交版本內容, 新增一個 dev 分支:</p>
<p>    git branch dev</p>
<p>然後利用 git checkout 在工作目錄中導出 dev 的版本 (其實, 修改前的 dev 狀態與 "add first function" 提交時相同</p>
<p>    git checkout dev</p>
<p>接下來, 對 myprogram.txt 改版, 在 first function 字串後,  連按兩個 Enter  後, 輸入:</p>
<p>    add test function</p>
<p>myprogram.txt 存檔後, 接著, 進行另一次的新增與提交.</p>
<p>    git add .</p>
<p>    git commit -m "add test function"</p>
<p>這時若希望看到各提交點間的關係, 可以利用:</p>
<p>    git log --graph --oneline --all</p>
<p>然後, 假設該測試功能已經通過, 準備與 add  second function 後的版本進行合併, 這時 git 出現 myprogram.txt 合併衝突, 因為 first function 後, 已經加入 seconf function, 但是 dev 分支是在 first function 加入後所導出的版本, 因此使用者在合併當下,  必須決定 add second function 與 add test function, 是只保留其中一項功能, 或者同時保留.</p>
<p>    git checkout master</p>
<p>將工作目錄轉為 master 的版本, 然後將 dev 分支的內容合併進來:</p>
<p>    git merge dev</p>
<p>這時的 myprogram.txt 內容為:</p>
<p><img alt="" height="273" src="https://mdecp2018.github.io/site-s40723242/images/myprogram_master_dev_conflict.png" width="231"/></p>
<p><span>必須要刪除衝突標註符號, 同時保留 add second function 與 add test function, 存檔後成為:</span></p>
<p><span><img alt="" height="205" src="https://mdecp2018.github.io/site-s40723242/images/2.png" width="210"/></span></p>
<p>最後對此一合併後的版本, 進行新增與提交:</p>
<p>    git add .</p>
<p>    git commit -m "complete first, second and test functions adding"</p>
<p>再以 git log --oneline --graph --all 檢查各提交間的關聯, 畫面如下圖所示:</p>
<p><img alt="" height="221" src="https://mdecp2018.github.io/site-s40723242/images/git_log_graph_oneline_all.png" width="635"/></p>
<p>利用以上方式管理檔案版次的好處是, 使用者可以透過高效能的 Git 工具, 導出各提交點的版本, 或者從任一版本建立分支進行各種測試, 不會影響到其他提交版本資料的發布, 等到近端的 git 倉儲進一步推送到遠端的伺服器時, 遠端倉儲不僅可以提供協同, 也可提升資料保全效益, 無論是近端或遠端電腦硬碟發生問題, 都可以從任一參與協同的倉儲中回復所有已經提交的各版本內容.</p>
<p>最後要將工作目錄導向最初 initial add 提交時的版本:</p>
<p>    git checkout 9439e67</p>
<p>導回 add first function 時的版本:</p>
<p>    git checkout 5fcdac9</p>
<p>導回 add second function 時的版本:</p>
<p>    git checkout fb092cc</p>
<p>導回 dev 時的狀態:</p>
<p>    git checkout 1c3d5ff</p>
<p>將工作目錄導回最後 master 合併 dev 分支的版本:</p>
<p>    git checkout ace97d7</p>
<p>將上述 test (畫面中為 test1) 目錄壓縮後: <a href="http://mde.tw/downloads/cp_w3_test_repo.7z">cp_w3_test_repo.7z</a></p>
<p>經過上述的 Git 近端指令操作, 可以了解在程式開發過程, 可以透過  Git 分散式版本管理系統的功能, 以非常具有彈性的流程進行程式碼的編寫, 尤其當協同開發人員眾多時,  Git 與 Github 將更能發揮其條理開發的特定, 並且安全地保存各版次資料內容.</p>
<h2> Python 語法</h2>
<p>Built-in Functions:</p>
<p><a href="https://docs.python.org/3.7/library/functions.html">https://docs.python.org/3.7/library/functions.html</a></p>
<p>PEP (Python Enhancement Proposals):</p>
<p>Index of PEP:<span> </span><a href="https://www.python.org/dev/peps/">https://www.python.org/dev/peps/</a></p>
<p>Style Guide for Python Code:<span> </span><a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></p>
<p>Docstring Conventions:<span> </span><a href="https://www.python.org/dev/peps/pep-0257/">https://www.python.org/dev/peps/pep-0257/</a></p>
<p>Python WSGI V1.0.1:<span> </span><a href="https://www.python.org/dev/peps/pep-3333/">https://www.python.org/dev/peps/pep-3333/</a></p>
<p>Python 3.7 Release Schedule:<span> </span><a href="https://www.python.org/dev/peps/pep-0537/">https://www.python.org/dev/peps/pep-0537/</a></p>
<p>Type Hints:<span> </span><a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a></p>
<p>條件判斷式用法:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-conditionals.html">https://www.cs.cmu.edu/~112/notes/notes-conditionals.html</a></p>
<p>迴圈用法:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-loops.html">https://www.cs.cmu.edu/~112/notes/notes-loops.html</a></p>
<p>程式除錯:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-debugging.html">https://www.cs.cmu.edu/~112/notes/notes-debugging.html</a></p>
<p>字串:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-strings.html">https://www.cs.cmu.edu/~112/notes/notes-strings.html</a></p>
<p>1 維數列與元組:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html</a></p>
<p>2 維數列:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html</a></p>
<p>集合:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-sets.html">https://www.cs.cmu.edu/~112/notes/notes-sets.html</a></p>
<p>字典:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-dictionaries.html">https://www.cs.cmu.edu/~112/notes/notes-dictionaries.html</a></p>
<p>效率:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-efficiency.html">https://www.cs.cmu.edu/~112/notes/notes-efficiency.html</a></p>
<p>物件導向:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-oop.html">https://www.cs.cmu.edu/~112/notes/notes-oop.html</a></p>
<p>遞迴:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part1.html">https://www.cs.cmu.edu/~112/notes/notes-recursion-part1.html</a></p>
<p><a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part2.html">https://www.cs.cmu.edu/~112/notes/notes-recursion-part2.html</a></p>
<p>執行緒:<span> </span><a href="https://docs.python.org/3/library/threading.html">https://docs.python.org/3/library/threading.html</a></p>
<p>演算法思維:<span> </span><a href="https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html">https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html</a></p>
<p>如何解決問題:<span> </span><a href="https://en.wikipedia.org/wiki/How_to_Solve_It">https://en.wikipedia.org/wiki/How_to_Solve_It</a></p>
<p>Python Tutorial:<span> </span><a href="https://docs.python.org/3.7/tutorial/index.html">https://docs.python.org/3.7/tutorial/index.html</a></p>
<p>Flask 網際程式:<span> </span><a href="http://flask.pocoo.org/">http://flask.pocoo.org/</a></p>
<p>範例:<span> </span><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a><span> </span>與<span> </span><a href="https://github.com/chiamingyen/pygrouf">PyGrouf</a></p>
<p>PyQt5 視窗程式:<span> </span><a href="https://pythonspot.com/pyqt5/">tutorial1</a>,<span> </span><a href="http://zetcode.com/gui/pyqt5/">tutorial2</a>,<span> </span><a href="https://build-system.fman.io/pyqt5-tutorial">tutorial 3</a>,<span> </span><a href="https://data-flair.training/blogs/python-pyqt5-tutorial/">tutorial 4</a>,<span> </span><a href="https://eric-ide.python-projects.org/">Eric6 IDE</a></p>
<p>範例:<span> </span><a href="https://github.com/KmolYuan/Pyslvs-PyQt5">Pyslvs</a></p>
<p>了解如何導入與建立模組</p>
<p><a href="https://docs.python.org/3/tutorial/modules.html">https://docs.python.org/3/tutorial/modules.html</a></p>
<p>如何吸引更多人運用計算機程式工具</p>
<p><a href="http://mde.tw/downloads/How%20to%20make%20teenage%20girls%20love%20coding%20using%20Python%20and%20the%20visual%20arts%20orienting%20language%20Processing.pdf">How to make teenage girls love coding using Python and the visual arts orienting language Processing.pdf</a></p>
<p>參考資料</p>
<p><a href="http://mde.tw/downloads/AutoWIG%20-%20automatic%20generation%20of%20python%20bindings%20for%20Cpp%20libraries.pdf">AutoWIG - automatic generation of python bindings for Cpp libraries.pdf</a></p>
<p><a href="https://github.com/StatisKit/AutoWIG">https://github.com/StatisKit/AutoWIG</a></p>
<p><a href="http://mde.tw/downloads/Solving%20inverse%20problems%20in%20building%20physics%20-%20an%20overview%20of%20guidelines%20for%20a%20careful%20and%20optimal%20use%20of%20data.pdf">Solving inverse problems in building physics - an overview of guidelines for a careful and optimal use of data.pdf</a></p>
<h2>CMSimfly 操作</h2>
<p>操作目的:</p>
<p>讓學員透過<span> </span><a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a><span> </span>的程式編寫架構與使用, 了解如何利用 Python 與 Flask 網際框架, 自行建構網際內容管理系統.</p>
<p>所欲解決問題:</p>
<p>機械設計工程師若能將協同產品設計流程搬至網際環境, 將可有效提升設計效能.</p>
<p>本課程即使用 CMSimfly 管理與教學內容相關的資料管理.</p>
<p>取得<span> </span><a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a><span> 檔案後, 解開後容量約 1GB. 放入 USB 隨身碟, 以 start.bat 啟動系統.</span></p>
<p><span>取得 </span><span><a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt 可攜系統 .7z</a> 檔案後, 解開後容量約 21 GB. 放入 USB 隨身碟, 以 start.bat (必須配合修改 CMSimfly 所在位置)啟動系統.</span></p>
<p>以瀏覽器開啟 https://localhost:8443 後, 以管理者密碼登入 CMSimfly.</p>
<p>由於 CMSimfly 頁面依照 h1, h2, h3 標註循序存入 content.htm, 使用者必須按照由上到下的順序建立所需頁面.</p>
<p>完成各階段改版後, 必須點擊 generate_pages 進行轉檔, 將 content.htm 內容分頁存靜態網站於 content 目錄中.</p>
<p>CMSimfly 靜態網頁模式將從根目錄的 index.html 跳轉頁面至 content 目錄中的 index.html, 顯示網際內容管理中的資料, 並由 blog 目錄導引網誌內容, reveal 目錄則導引網際投影片內容.</p>
<h4>Python 程式檢定題庫</h4>
<p>來源:<span> </span><a href="http://www.im.cyut.edu.tw/html/html/board/p_test/ptest_board.htm">http://www.im.cyut.edu.tw/html/html/board/p_test/ptest_board.htm</a></p>
<p><a href="http://mde.tw/cp2018/downloads/cyut_python_quiz_1.pdf">cyut_python_quiz_1.pdf</a><span> </span>(進修部)</p>
<p><a href="http://mde.tw/cp2018/downloads/cyut_python_quiz_2.pdf">cyut_python_quiz_2.pdf</a><span> </span>(日間部)</p>
<ol>
<li>請日夜間部各計算機程式課程學員, 以學號在<span> </span><a href="https://github.com/">Github</a><span> </span>登記帳號</li>
<li>建立一個 學號.github.io 倉儲 (<a href="https://guides.github.com/features/pages/">參考</a>)</li>
<li>在倉儲中納入<span> </span><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a><span> </span>+<span> </span><a href="https://revealjs.com/#/">reveal.js</a><span> </span>+<span> </span><a href="https://blog.getpelican.com/">Pelican blog</a><span> </span>系統</li>
<li>啟動<span> </span><a href="https://brython.info/">Brython</a><span> </span>網際 Python 系統</li>
<li>日間部學員將<span> </span><a href="http://mde.tw/cp2018/downloads/cyut_python_quiz_2.pdf">cyut_python_quiz_2.pdf</a><span> </span>中各題目的程式配置在個人的 學號.github.io 網頁中</li>
<li>夜間部學員將<span> </span><a href="http://mde.tw/cp2018/downloads/cyut_python_quiz_1.pdf">cyut_python_quiz_1.pdf</a><span> </span>中各題目的程式配置在個人的 學號.github.io 網頁中</li>
<li>請各學員在每週上課結束後, 利用 學號.github.io/blog/ 紀錄學習歷程</li>
<li>請各學員在每週上課結束後, 利用 學號.github.io/reveal/ 進行網際學習簡報</li>
</ol>
<p>備註:</p>
<p>除了在<span> </span><a href="https://github.com/">Github</a><span> </span>系統中建立 學號.github.io 網站外, 也可以自行利用<span> </span><a href="https://www.fossil-scm.org/">Fossil SCM</a>, 在系上協同設計室中的伺服器, 建立與<span> </span><a href="https://pages.github.com/">Github Pages</a><span> </span>同等功能的<span> </span><a href="https://www.fossil-scm.org/xfer/doc/trunk/www/embeddeddoc.wiki">Fossil doc</a><span> </span>網站. (欲額外自建伺服器之學員, 請洽計算機程式課程助教)</p>
<p>參考資料</p>
<p>2016 Python Recipes Handbook</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-0241-8">https://link.springer.com/book/10.1007/978-1-4842-0241-8</a></p>
<p><a href="http://mde.tw/cp2018/downloads/Algorithmic_Problem_Solving_with_Python.pdf">2015 Algorithmic Problem Solving with Python.pdf</a></p>
<h1>Git基本練習影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8p9dFrIT4Ro?t=89s" width="560"></iframe></p>
<p>Git基本練習</p>
<p><span>啟動 p37 可攜系統</span></p>
<p><span>在其中一個 Dos 命令列中, 輸入:</span></p>
<p><span>    c:</span></p>
<p><span>表示要從 y: 槽切換到 c: 槽, 然後再下:</span></p>
<p><span>    cd \</span></p>
<p><span>表示要更換目錄到 c: 槽的根目錄. 接下來建立一個 test 目錄:</span><span></span></p>
<p><span>    mkdir test</span></p>
<p><span>然後更換目錄到此 test 目錄中.</span></p>
<p><span>    cd test</span></p>
<p><span>接下來要執行 git 指令, 表示要將 test 起始為 Git 的倉儲:</span></p>
<p><span>    git init</span></p>
<p><span>這時, c:\test 目錄中會新增一個 .git 目錄, 表示現在這個 c:\test 已經是 Git 倉儲.</span></p>
<p><span>接下來要利用 SciTE 編輯器, 在 test 目錄中建立一個 myprogram.txt 文字檔案, 在此之前, 請利用 SciTE 的下拉式功能表 Options 中的 Open Global Options File 開啟 SciTEGlobal.properties 設定檔案, 找到第 137 行的</span></p>
<p><span>    load.on.activate=1</span></p>
<p><span>去掉原先最前頭的 "#" 符號, 然後存檔, 之後關閉所有開啟的 SciTE 編輯器, 如此, 可以讓 SciTE 所開啟的檔案, 內容有修改時, 可以即時呈現在編輯區中.</span></p>
<p><span>接著, 重新在 Dos 命令列中輸入:</span></p>
<p><span>    y:\SciTE\bin\Sc1.exe </span></p>
<p><span>開啟已經修改 SciTEGlobal.properties 設定檔案之後的 SciTE 編輯區, </span><span>並且在  myprogram.txt 檔案中, 只加入一行:</span><span></span></p>
<p><span>    my program</span></p>
<p><span>接著存檔, 這時 c:\test 目錄中除了有 .git 目錄, 又多了一個 myprogram.txt 檔案.</span></p>
<p>接下來要對 c:\test 倉儲進行新增與提交流程, 將 myprogram.txt 納入 .git 的版次管理.</p>
<p>    git add myprogram.txt</p>
<p>    git commit -m "initial add"</p>
<p>這時, c:\test 倉儲中已經有一個改版的記錄, 接下來再編輯 myprogram.txt  檔案. 在其中的 "my program" 字串後, 連按兩個 Enter 後, 加入:</p>
<p>    first function</p>
<p>然後存檔, 接著再執行 git add 與 git commit:</p>
<p>    git add .</p>
<p>    git commit -m "add first function"</p>
<p>接著重覆上述編輯動作, 新增 "second function"</p>
<p>然後, 再執行 git add 與 git commit :</p>
<p>    git add .</p>
<p>    git commit -m "add second function"</p>
<p>這時, 使用者已經可以利用:</p>
<p>    git log</p>
<p>看到倉儲中已經有三個提交. 分別為:</p>
<p>    a3a2eb3 add second function<br/>    9295dfd add first function<br/>    3019d3f initial add</p>
<p>這時若希望在加入 first function 版本狀態時, 新增一個測試功能, 若通過測試符合需求, 則併入已經納入 second function 的版本中, 若不符合需求, 則可將該測試分支刪除.</p>
<p>先準備將工作目錄, 導回 "add first function" 的提交版本.</p>
<p>    git checkout 9295dfd</p>
<p>然後以此提交版本內容, 新增一個 dev 分支:</p>
<p>    git branch dev</p>
<p>然後利用 git checkout 在工作目錄中導出 dev 的版本 (其實, 修改前的 dev 狀態與 "add first function" 提交時相同</p>
<p>    git checkout dev</p>
<p>接下來, 對 myprogram.txt 改版, 在 first function 字串後,  連按兩個 Enter  後, 輸入:</p>
<p>    add test function</p>
<p>myprogram.txt 存檔後, 接著, 進行另一次的新增與提交.</p>
<p>    git add .</p>
<p>    git commit -m "add test function"</p>
<p>這時若希望看到各提交點間的關係, 可以利用:</p>
<p>    git log --graph --oneline --all</p>
<p>然後, 假設該測試功能已經通過, 準備與 add  second function 後的版本進行合併, 這時 git 出現 myprogram.txt 合併衝突, 因為 first function 後, 已經加入 seconf function, 但是 dev 分支是在 first function 加入後所導出的版本, 因此使用者在合併當下,  必須決定 add second function 與 add test function, 是只保留其中一項功能, 或者同時保留.</p>
<p>    git checkout master</p>
<p>將工作目錄轉為 master 的版本, 然後將 dev 分支的內容合併進來:</p>
<p>    git merge dev</p>
<p>這時的 myprogram.txt 內容為:</p>
<p><img alt="" height="273" src="https://mdecp2018.github.io/site-s40723242/images/myprogram_master_dev_conflict.png" width="231"/></p>
<p><span>必須要刪除衝突標註符號, 同時保留 add second function 與 add test function, 存檔後成為:</span></p>
<p><span><img alt="" height="205" src="https://mdecp2018.github.io/site-s40723242/images/2.png" width="210"/></span></p>
<p>最後對此一合併後的版本, 進行新增與提交:</p>
<p>    git add .</p>
<p>    git commit -m "complete first, second and test functions adding"</p>
<p>再以 git log --oneline --graph --all 檢查各提交間的關聯, 畫面如下圖所示:</p>
<p><img alt="" height="221" src="https://mdecp2018.github.io/site-s40723242/images/git_log_graph_oneline_all.png" width="635"/></p>
<p>利用以上方式管理檔案版次的好處是, 使用者可以透過高效能的 Git 工具, 導出各提交點的版本, 或者從任一版本建立分支進行各種測試, 不會影響到其他提交版本資料的發布, 等到近端的 git 倉儲進一步推送到遠端的伺服器時, 遠端倉儲不僅可以提供協同, 也可提升資料保全效益, 無論是近端或遠端電腦硬碟發生問題, 都可以從任一參與協同的倉儲中回復所有已經提交的各版本內容.</p>
<p>最後要將工作目錄導向最初 initial add 提交時的版本:</p>
<p>    git checkout 9439e67</p>
<p>導回 add first function 時的版本:</p>
<p>    git checkout 5fcdac9</p>
<p>導回 add second function 時的版本:</p>
<p>    git checkout fb092cc</p>
<p>導回 dev 時的狀態:</p>
<p>    git checkout 1c3d5ff</p>
<p>將工作目錄導回最後 master 合併 dev 分支的版本:</p>
<p>    git checkout ace97d7</p>
<p>將上述 test (畫面中為 test1) 目錄壓縮後: <a href="http://mde.tw/downloads/cp_w3_test_repo.7z">cp_w3_test_repo.7z</a></p>
<p>經過上述的 Git 近端指令操作, 可以了解在程式開發過程, 可以透過  Git 分散式版本管理系統的功能, 以非常具有彈性的流程進行程式碼的編寫, 尤其當協同開發人員眾多時,  Git 與 Github 將更能發揮其條理開發的特定, 並且安全地保存各版次資料內容</p>
<h1>網頁編輯練習影片</h1>
<p>1.先開啟start.bat</p>
<p>2.跑到site-s40723123的資料夾</p>
<p>3.輸入python wsgi.py 並複製網址</p>
<p>4.修改網站</p>
<p>5.輸入git add .</p>
<p>6.輸入git commit -m "xxx"</p>
<p>7.輸入git push 並輸入帳號密碼</p>
<p>8.修改成功</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HqVBrDHnPNA" width="560"></iframe></p>
<h1>如何更改reveal影片</h1>
<p>1.用Leo Editor 開啟 config/reveal.leo</p>
<p>2.開啟靜態http-server.py</p>
<p>3.修改reveal投影片封面標題</p>
<p>5.Save&gt;git push</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rEfT1N5qlPw" width="560"></iframe></p>
<h1>升級最新的CMSimfly影片</h1>
<p>1.先到mde.tw&gt;18cp&gt;工具 &gt;CMSimfly</p>
<p>2.進入<a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a></p>
<p>3.flaskapp.py&gt;Raw&gt;Ctrl+a&gt;複製</p>
<p>4.貼到自己的site-s40723123 打開flaskapp.py 覆蓋</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GEYA6bBWN-U?feature=youtu" width="560"></iframe></p>
<p></p>
<p></p>